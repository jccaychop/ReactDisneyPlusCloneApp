import React, { useEffect, useState } from 'react';
import queryString from 'query-string';
import { Content, Search } from '../components';
import { URL_PICTURE } from '../environments/environments';
import { useForm } from '../hooks/useForm';
import { pictureTotalBrands } from '../utils/brandPictures';
import { exploreMedia, searchMediaByTitle } from './../utils/searchMedia';
import { useLocation, useHistory } from 'react-router';
import FooterContainer from './footer';
import SpinnerContainer from './spinner';

const SearchContainer = ({ langSelected, siteData, brandContent, pictureID }) => {

    const location = useLocation();
    const history = useHistory();
    const { q = '' } = queryString.parse(location.search);

    const [inputSearch, handleInputChange, onClickInputChange, autoGeneratedBilling, reset, reset2] = useForm({ search: q });
    const [result, setResult] = useState([]);

    useEffect(() => {
        if (inputSearch?.search?.trim() !== "") {
            let word = inputSearch.search.trim();
            let res = searchMediaByTitle(brandContent, word);
            history.push(`?q=${inputSearch.search}`);
            setResult(res);
        } else {
            history.push(`?q=${inputSearch.search}`);
            setResult(exploreMedia(brandContent));
        }
    }, [brandContent, inputSearch, q]);

    return (
        <Search>
            <Search.Group>
                <Search.Input
                    type="text"
                    autoFocus
                    spellCheck={false}
                    placeholder="Search by title"
                    name="search"
                    value={inputSearch.search}
                    onChange={handleInputChange}
                />

                <i className="fas fa-times" onClick={() => reset2({ search: "" })}></i>
            </Search.Group>

            <Content.Media>
                {
                    (result.length === 0)
                        ? (<SpinnerContainer />)
                        : (
                            result.map(element => {
                                let url = (element['media_type'] === "tv") ? "/series" : "/movies";
                                return (
                                    <Content.NavLink key={element.id} to={`${url}/${element.id}`}>
                                        <Content.Image
                                            src={URL_PICTURE + pictureTotalBrands[element.id].lang[pictureID].poster}
                                        />
                                    </Content.NavLink>
                                )
                            })
                        )
                }
            </Content.Media>

            <FooterContainer siteData={siteData} />
        </Search>
    )
}

export default SearchContainer;
