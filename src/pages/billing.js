import React, { useEffect, useState } from 'react';
import { Redirect } from 'react-router';
import { DateTime } from "luxon";
import { getCard } from '../services/randommer';
import { Signup } from '../components';

const Billing = ({ siteData, formValues, handleInputChange, autoGeneratedBilling, nextStep, step, setStep }) => {

    const { signup: { step_4: { step_label, title, warning, fake_button, cancellation, confirmation, form, billing_error } } } = siteData;
    const [isError, setIsError] = useState(false);

    const generateRandomCard = () => {
        const types = ['Visa', 'Mastercard', 'AmericanExpress'];
        const randomInt = Math.floor(Math.random() * (3));

        getCard(types[randomInt])
            .then(data => {
                const month = DateTime.fromISO(data.date).toFormat('LL');
                const year = DateTime.fromISO(data.date).toFormat('yy');
                autoGeneratedBilling({
                    fullName: data.fullName.toUpperCase(),
                    cardNumber: data.cardNumber,
                    date: `${month}/${year}`,
                    cvv: data.cvv,
                    type: data.type,
                });
                setIsError(false);
            })
            .catch(e => {
                autoGeneratedBilling({
                    fullName: "",
                    cardNumber: "",
                    date: "",
                    cvv: "",
                    type: ""
                });
                setIsError(false);
            })
    };

    const validationBilling = () => {
        const { billing: { fullName, cardNumber, date, cvv } } = formValues;
        if (fullName === "" || cardNumber === "" || date === "" || cvv === "") {
            setIsError(true);
        }
    };

    useEffect(() => {
        setStep(4);
    }, [step]);

    useEffect(() => {
        window.scrollTo(0, 0);
    }, []);

    if (formValues.email.trim() === "" && formValues.agreement === false && formValues.password.trim() === "") {
        return <Redirect to="/signup" />
    }

    return (
        <Signup.Form>
            <Signup.Step>{step_label}</Signup.Step>
            <Signup.Title>{title}</Signup.Title>
            <Signup.Text style={{ marginTop: "10px" }}>{cancellation}</Signup.Text>

            <Signup.Text id="warning">{warning}</Signup.Text>

            <Signup.Button id="generator" type="button" onClick={generateRandomCard}>{fake_button}</Signup.Button>

            <Signup.InputGroup>
                <Signup.Label>{form.full_name}</Signup.Label>
                <Signup.Input
                    type="text"
                    autocomplete="off"
                    name="fullName"
                    value={formValues.billing.fullName}
                    readOnly
                    disabled={true}
                    style={{ border: isError && "1px solid var(--red-1)" }}
                />
                {isError && (<Signup.Text style={{ color: "var(--red-1)" }}>{billing_error.full_name}</Signup.Text>)}
            </Signup.InputGroup>

            <Signup.InputGroup ccType={formValues.billing.type}>
                <Signup.Label>{form.card_number}</Signup.Label>
                <Signup.Input
                    id="credit-card"
                    type="text"
                    autocomplete="off"
                    name="cardNumber"
                    value={formValues.billing.cardNumber}
                    readOnly
                    disabled={true}
                />
                {isError && (<Signup.Text style={{ color: "var(--red-1)" }}>{billing_error.card_number}</Signup.Text>)}
            </Signup.InputGroup>

            <Signup.InputGroupRow>
                <Signup.InputGroup>
                    <Signup.Label>{form.date}</Signup.Label>
                    <Signup.Input
                        type="text"
                        placeholder="MM/AA"
                        autocomplete="off"
                        name="date"
                        value={formValues.billing.date}
                        readOnly
                        disabled={true}
                    />
                    {isError && (<Signup.Text style={{ color: "var(--red-1)" }}>{billing_error.date}</Signup.Text>)}
                </Signup.InputGroup>

                <Signup.InputGroup>
                    <Signup.Label>{form.cvv}</Signup.Label>
                    <Signup.Input
                        type="password"
                        placeholder="CVV"
                        autocomplete="off"
                        name="cvv"
                        value={formValues.billing.cvv}
                        readOnly
                        disabled={true}
                    />
                    {isError && (<Signup.Text style={{ color: "var(--red-1)" }}>{billing_error.cvv}</Signup.Text>)}
                </Signup.InputGroup>
            </Signup.InputGroupRow>

            <Signup.Text style={{ marginBottom: "15px" }}>{confirmation}</Signup.Text>

            <Signup.Button type="button" onClick={validationBilling}>{form.button}</Signup.Button>
        </Signup.Form>
    )
}

export default Billing;
// https://randommer.io/Card